{"ast":null,"code":"var _jsxFileName = \"/Users/luistejada/Documents/Lumos-Digital/frontend/src/components/ProtectedRoute.tsx\";\nimport React from 'react';\nimport { Navigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProtectedRoute = ({\n  children,\n  allowedRoles\n}) => {\n  const token = localStorage.getItem('token');\n  const userRole = localStorage.getItem('userRole'); // Asumimos que el rol del usuario está almacenado\n\n  if (!token) {\n    // Si no hay token, redirigir al login\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 12\n    }, this);\n  }\n  if (allowedRoles && !allowedRoles.includes(userRole || '')) {\n    // Si el rol del usuario no está permitido, redirigir a una página de acceso denegado o a otro lugar\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/access-denied\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Si el usuario tiene el rol adecuado, renderizar el componente\n  return children;\n};\n_c = ProtectedRoute;\nexport default ProtectedRoute;\nvar _c;\n$RefreshReg$(_c, \"ProtectedRoute\");","map":{"version":3,"names":["React","Navigate","jsxDEV","_jsxDEV","ProtectedRoute","children","allowedRoles","token","localStorage","getItem","userRole","to","fileName","_jsxFileName","lineNumber","columnNumber","includes","_c","$RefreshReg$"],"sources":["/Users/luistejada/Documents/Lumos-Digital/frontend/src/components/ProtectedRoute.tsx"],"sourcesContent":["import React from 'react';\nimport { Navigate } from 'react-router-dom';\n\ninterface ProtectedRouteProps {\n  children: React.ReactElement;\n  allowedRoles?: string[]; // allowedRoles es opcional\n}\n\nconst ProtectedRoute: React.FC<ProtectedRouteProps> = ({ children, allowedRoles }) => {\n  const token = localStorage.getItem('token');\n  const userRole = localStorage.getItem('userRole'); // Asumimos que el rol del usuario está almacenado\n\n  if (!token) {\n    // Si no hay token, redirigir al login\n    return <Navigate to=\"/login\" />;\n  }\n\n  if (allowedRoles && !allowedRoles.includes(userRole || '')) {\n    // Si el rol del usuario no está permitido, redirigir a una página de acceso denegado o a otro lugar\n    return <Navigate to=\"/access-denied\" />;\n  }\n\n  // Si el usuario tiene el rol adecuado, renderizar el componente\n  return children;\n};\n\nexport default ProtectedRoute;"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAO5C,MAAMC,cAA6C,GAAGA,CAAC;EAAEC,QAAQ;EAAEC;AAAa,CAAC,KAAK;EACpF,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,MAAMC,QAAQ,GAAGF,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC;;EAEnD,IAAI,CAACF,KAAK,EAAE;IACV;IACA,oBAAOJ,OAAA,CAACF,QAAQ;MAACU,EAAE,EAAC;IAAQ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACjC;EAEA,IAAIT,YAAY,IAAI,CAACA,YAAY,CAACU,QAAQ,CAACN,QAAQ,IAAI,EAAE,CAAC,EAAE;IAC1D;IACA,oBAAOP,OAAA,CAACF,QAAQ;MAACU,EAAE,EAAC;IAAgB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACzC;;EAEA;EACA,OAAOV,QAAQ;AACjB,CAAC;AAACY,EAAA,GAhBIb,cAA6C;AAkBnD,eAAeA,cAAc;AAAC,IAAAa,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}